h1. mdns -- service discovery for node.js

|_. Package: | mdns |
|_. Description: | mdns/zeroconf/bonjour service discovery add-on |
|_. Installation: | @npm install mdns@ |
|_. Documentation: | "mdns user guide":http://agnat.github.com/node_mdns |
|_. Version: | 0.0.4 |

mdns adds support for multicast DNS service discovery, also known as zeroconf or bonjour to "node.js":/joyent/node. It provides an object-oriented interface to announce and browse services on the local network.

Internally, it uses the dns_sd API which is available on all major platforms. However, that does not mean it is equally well supported on all platforms. See "Compatibility Notes":#compatibility for more information.

on debian:

bc. sudo aptitude install libavahi-compat-libdnssd-dev

h2. Installation

On Linux and other systems using the avahi daemon the avahi dns_sd compat library and its header files are required.  On ubuntu and other debianesque systems use the following command to install them:

bc. sudo aptitude install libavahi-compat-libdnssd-dev

node_mdns is available as a npm package. To fetch, compile and install the add-on do:

bc. npm install mdns

If you want to play with the latest source code, here is a more manual approach:

bc.. git clone http://github.com/agnat/node_mdns
cd node_mdns
node-waf configure build && ./run_tests

h2. Quickstart

Multicast DNS service discovery provides a way to announce and discover services on the local network. Here is how to announce a HTTP server running on port 4321:

bc. var mdns = require('mdns')
  , ad = mdns.createAdvertisement(mdns.tcp('http'), 4321)
  ;
ad.start();

A good place to do this is the @'listening'@ event handler of your http server. Here is how to browse all HTTP servers on the local network:

bc. var browser = mdns.createBrowser(mdns.tcp('http'));
browser.on('serviceUp', function(info) {
  console.log("service up: ", info);
});
browser.on('serviceDown', function(info) {
  console.log("service down: ", info);
});
browser.start();

As you can see the browser object is an @EventEmitter@. For each HTTP server a 'serviceUp' event is emitted. Likewise, if a server disappears 'serviceDown' is send. A 'serviceUp' info object might look like this:

bc. { interfaceIndex: 4
, serviceName: 'somehost'
, regtype: {serviceType: 'http', protocol: 'tcp', subtypes: []}
, replyDomain: 'local.'
, fullname: 'somehost._http._tcp.local.'
, host: 'somehost.local.'
, port: 4321
, addresses: [ '10.1.1.50', 'fe80::21f:5bff:fecd:ce64' ]
}

h3. On Regtypes

_regtypes_ are strings used to resolve service queries. A _regtype_ always contains a service type identifier and information on the protocol. Additionally it may contain one or more subtype identifiers. Here are some examples:

bc. _http._tcp
_osc._udp
_osc._udp,_api-v1,_api-v2

That's an awful lot of underscores and punctation. To make things easier mdns has a helper class, called @RegType@ and some utility functions like @mdns.tcp(...)@ in the examples above. Here are some ways to create a @RegType@ object:

bc. var r0 = mdns.tcp('http')                 // string form: _http._tcp
  , r1 = mdns.udp('osc', 'api-v1')        // string form: _osc._udp,_api-v1
  , r2 = new mdns.RegType('http', 'tcp')  // string form: _http._tcp
  , r3 = mdns.makeRegType('https', 'tcp') // string form: _https._tcp
  ;

Wherever mdns calls for a regtype argument you can pass a @RegType@ object or any of the following representations:

bc. var r0 = '_http._tcp,_api-v1'                                          // string form
  , r1 = ['http', 'tcp', 'api-v1']                                     // array form
  , r2 = {serviceType: 'http', protocol: 'tcp', subtypes: ['api-v1']}  // object form
  ;

In fact all of these are legal constructor arguments for @RegType@. JSON (de-)serialization works too. And finally there is @mdns.makeRegType(...)@ which turns any representation into a @RegType@ object unless it already is one.

h3(#resolver_sequence). The resolver sequence

The @mdns.Browser@ object uses a resolver sequence to collect additional information on a discovered service. A resolver sequence is basically just an array of functions. The functions are called in order and receive two arguments: an @info@ object to decorate and a @next()@ function. Each function gathers information on the service, often by invoking asynchronous operations. When done the data is stored on the @info@ object and the next function is invoked by calling @next()@. This is kind of like webserver middleware as it happens between service discovery and emitting the events.

Resolver sequence tasks (RSTs) are created by calling factory functions:

bc. var sequence = [
    mdns.rst.DNSServiceResolve()
  , mdns.rst.DNSGetAddrInfo({families: [4] })
];

To use a custom sequence pass it to the browser like this:

bc. var browser = mdns.createBrowser(mdns.tcp('http'), {resolverSequence: sequence});

And of course you can write your own tasks:

bc. var MCHammer = function MCHammer() {
  return function MCHammer(info, next) {
    console.log('STOP!');
    setTimeout(function() {
        console.log('hammertime...');
        info.hammertime = new Date();
        next();
    }, 2000);
  }
}

h2. Reference

Many arguments and options in mdns are directly passed to the dns_sd API. This document only covers the more important features. For in depth information on the API and how zeroconf service discovery works refer to "Further Reading":#further_reading.

h3. mdns.Advertisement

An @mdns.Advertisement@ publishes information about a service on the local network.

bq(#fairydust). The hack0r takes a good look at the local network, _someones_ local network and sprinkles it with fairydust. He watches the particles being swirled up into vortices originating in the passing network traffic. Datadevils on a parking lot next to the information freeway. Visible entropy. The particles in the vortices are illuminated by open ports and the pale neon light of multicast dns service advertisements. The hack0r smiles.

h4. new mdns.Advertisement(regtype, port, [options], [callback])

Create a new service advertisement with the given @regtype@ and @port@. The @callback@ has the arguments @(error, info)@ and it is run after successful registration and if an error occures. If the advertisement is used without a callback an handler should be attached to the @'error'@ event. The @options@ object contains additional arguments to @DNSServiceRegister(...)@:

- name := up to 63 bytes of unicode to be used as the instance name. Think iTunes shared library names. If not given the hostname is used instead.
- interfaceIndex := one-based index of the network interface the service should be announced on.
- txtRecord      := is interesting... but not yet implemented. You can pass a @Buffer@ object but unfortunatly there is no way to create it.
- host           := see documentation of @DNSServiceRegister(...)@
- domain         := see documentation of @DNSServiceRegister(...)@
- flags          := see documentation of @DNSServiceRegister(...)@
- context        := see documentation of @DNSServiceRegister(...)@

h4. Event: 'error'

bc. function(exception) {}

Emitted on asynchronous errors.

h4. start()

Start the advertisement.

h4. stop()

Stop the advertisement.

h3. mdns.Browser

A @mdns.Browser@ performs the discovery part. It emits events as services appear and disappear on the network. For new services it also resolves hostname, port and ip addresses. The "resolver sequence":#resolver_sequence is fully user configurable.

h4. new mdns.Browser(regtype, [options])

Create a new browser to discover services that match the given @regtype@. @options@ may contain the following properties:

- resolverSequence := custom "resolver sequence":#resolver_sequence for this browser
- interfaceIndex   := one-based index of the network interface the services should be discovered on.
- domain           := see documentation of @DNSServiceBrowse(...)@
- context          := see documentation of @DNSServiceBrowse(...)@
- flags            := see documentation of @DNSServiceBrowse(...)@

h4. Event: 'serviceUp'

bc. function(info) {}

Emitted when a new matching service is discovered.

h4. Event: 'serviceDown'

bc. function(info) {}

Emitted when a matching service disappears.

h4. Event: 'serviceChanged'

bc. function(info) {}

Emitted when a matching service either appears or disappears. It is a new service if @info.flags@ has @mdns.kDNSServiceFlagsAdd@ set.

h4. Event: 'error'

bc. function(exception) {}

Emitted if you try to get a beer after last orders.

h4. start()

Start the browser.

h4. stop()

Stop the browser.

h4. mdns.Browser.defaultResolverSequence

This is the resolver sequence used by all browser objects that do not override it. It contains two steps. On platforms that have @DNSGetAddrInfo(...)@ it has the following items:

bc. var default_sequence = [
    mdns.rst.DNSServiceResolve()
  , mdns.rst.DNSGetAddrInfo()
  , mdns.rst.makeAddressesUnique()
];

On platforms that don't, @mdns.rst.lookup(...)@ is used instead.

You could modify the default sequence but you shouldn't.

h3. Resolve Sequence Tasks

h4. mdns.rst.DNSServiceResolve(options)

Resolve hostname and port. Probably all but the empty sequence start with this task. The @options@ object may have the following properties:

- flags := flags passed to @DNSServiceResolve(...)@

h4. mdns.rst.DNSGetAddrInfo(options)

Resolve ip addresses using @DNSGetAddrInfo(...)@

h4. mdns.rst.getaddrinfo(options)

Resolve ip addresses using nodes @cares.getaddrinfo(...)@

h4. mdns.rst.makeAddressesUnique()

Filters the addresses to be unique.

h4. mdns.rst.filterAddresses(f)

Filters the addresses by invoking @f()@ on the address. If @f()@ returns false the address is dropped.

h4. mdns.rst.dumpInfo()

Print the @info@ object.

h3. mdns.RegType

h2. Design Notes

The implementation has two layers: A low-level API and a more userfriendly object based API. The low-level API is implemented in C++ and just wraps functions, datastructures and constants from @dns_sd.h@. Most of the code deals with argument conversion and error handling. A smaller portion deals with callbacks from C(++) to javascript.

The high-level API is written in javascript. It connects the low-level API to nodes non-blocking IO infrastructure, namely @process.IOWatcher@. This results in excelent separation of concerns and leads to a very robust design.

h2. Bugs, Fixes and Contributions

Yes, please.

h2(#compatibility). Compatibility Notes

h2(#further_reading). Further Reading

* "dns_sd API documentation":http://developer.apple.com/library/mac/#documentation/Networking/Reference/DNSServiceDiscovery_CRef/dns_sd_h/
* "Bonjour Overview":http://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/NetServices/Introduction.html
* "DNS Service Discovery Programming Guide":http://developer.apple.com/library/mac/#documentation/Networking/Conceptual/dns_discovery_api/Introduction.html
- 

h2. License (MIT)

Copyright (c) 2010 David Siegel

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

